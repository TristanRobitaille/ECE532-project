#include "i2s_audio.h"

//----- DECLARATIONS -----//
void i2s_audio_init() {
	// ADAU1761 I2C settings control
	u8 tx_data[2] = {0x21, 0x10101001};
	XIic_Send(XPAR_I2S_AUDIO_AXI_IIC_1_BASEADDR, ADAU1761_I2C_ADDR, tx_data, 2, XIIC_STOP);


	// AXI I2S driver settings
	i2s_audio_set_data_width((u32) I2S_DEFAULT_DATA_WIDTH);
	i2s_audio_set_bclk_div((u32) I2S_DEFAULT_BCLK_DIV);
	i2s_audio_set_mclk_div((u32) I2S_DEFAULT_MCLK_DIV);

	i2s_audio_write_data((u32) 0x00000000);
	i2s_audio_enable();
}

void i2s_audio_enable() {
	Xil_Out32((UINTPTR) I2S_EN_REG, (u32) 0x00000001); //EN bit is the LSb
}

void i2s_audio_disable() {
	Xil_Out32((UINTPTR) I2S_EN_REG, (u32) 0x00000000); //EN bit is the LSb
}

void i2s_audio_set_data_width(u32 data_width) {
	if (data_width > 32) {
		xil_printf("I2S data width (%d) is greater than maximum (32)! Exiting.\n", data_width);
		exit(-1);
	}

	u32 curr_data_width = Xil_In32((UINTPTR) I2S_DATA_WIDTH_REG);
	if (data_width != curr_data_width) { xil_printf("Note: You are changing the I2S data width (from %d to %d). Will need to update BPF in R16 of I2S driver (ADAU1761).", curr_data_width, data_width); }
	Xil_Out32((UINTPTR) I2S_DATA_WIDTH_REG, data_width);
}

void i2s_audio_set_bclk_div(u32 bclk_div) {
	u32 curr_clk_div = Xil_In32((UINTPTR) I2S_CLK_DIV_REG);
	u32 new_clk_div = (curr_clk_div & 0xFFFF0000) | bclk_div;
	Xil_Out32((UINTPTR) I2S_CLK_DIV_REG, new_clk_div);
}

void i2s_audio_set_mclk_div(u32 mclk_div) {
	u32 curr_clk_div = Xil_In32((UINTPTR) I2S_CLK_DIV_REG);
	u32 new_clk_div = (curr_clk_div & 0x0000FFFF) | (mclk_div << 16);
	Xil_Out32((UINTPTR) I2S_CLK_DIV_REG, new_clk_div);
}

void i2s_audio_write_data(u32 data) {
	Xil_Out32((UINTPTR) I2S_DATA_REG, data);
}
